[{"authors":null,"categories":null,"content":"John Walker is a data analyst, student and volunteer. Previous life in banking technology, performed systems integration, development \u0026amp; delivery project management and program management office (PMO) roles.\nActively seeking assignments - Happy to consider pro bono work for non-profits\nBased over the years in Paris, London, Tokyo and Chicago - delivered projects in 12 countries\nCurrent activities:\n Data Analysis \u0026amp; Visualization Generative Images Volunteer Tutoring  ","date":1601683200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1601683200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/john-walker/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/john-walker/","section":"authors","summary":"John Walker is a data analyst, student and volunteer. Previous life in banking technology, performed systems integration, development \u0026amp; delivery project management and program management office (PMO) roles.\nActively seeking assignments - Happy to consider pro bono work for non-profits","tags":null,"title":"John Walker","type":"authors"},{"authors":["John Walker"],"categories":["Generative"],"content":"Antonio Sánchez Chinchón aka Fronkenstein is a favorite producer of generative images. Here\u0026rsquo;s he\u0026rsquo;s created code for images from work on mold pattern formation and efforts to simulate those patterns by Sage Jenson so it\u0026rsquo;s a use of cellular automata to describe actual cellular travel. Jenson\u0026rsquo;s post \u0026ldquo;talks about a generative system called Physarum model, which simulates the evolution of a colony of extremely simple organisms that, under certain environmental conditions, result into complex behaviors\u0026rdquo;\nFrom Jenson: \u0026ldquo;A simple 3-by-3 mean filter is applied to simulate diffusion of the particle trail, and then a multiplicative decay factor is applied to simulate trail dissipation over time. The diagram below describes the six sub-steps of a simulation tick:\u0026rdquo;\n Fronkenstein\u0026rsquo;s post provides several image examples running his code.\nMy images are completely derivative from the code created by Fronkenstein - still good fun as the images can vary from one to another quite a bit - i haven\u0026rsquo;t changed a line of code, which can be found here, just the run parameters to try different effects\n","date":1601683200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601683200,"objectID":"89f61f39706da493b17c110ebf011d2c","permalink":"/post/2020-10-01-abstractions/","publishdate":"2020-10-03T00:00:00Z","relpermalink":"/post/2020-10-01-abstractions/","section":"post","summary":"Cellular automata programmed to simulate actual cellular travel patterns","tags":["Generative","Cellular Automata"],"title":"Abstractions","type":"post"},{"authors":null,"categories":["R Programming"],"content":"\rRotation of rectangles in a grid using a general pattern for simulated hysteresis. This almost entirely derivative effort is a tweak code provided by @quantixed in their post Turn A Square: generative aRt. The incremental change here is to organize the calculated hysteresis as rectangles of line segments so they can be filled with colors using the ggplot2 library. Chose the viridis color palette here, it seemed to work nicely.\nlibrary(ggplot2)\rlibrary(viridis)\r## Loading required package: viridisLite\rFill colors are based on the average shift in segments of a rectangle so the more twisted away from the grid the more the fill color will change.\nThe make_grid_art function will make grid art arguments define\n\rthe number of squares in each dimension (xSize, ySize)\rgrout defines the gap between squares (none = 0, max = 1)\rhFactor defines the amount of hysteresis (none = 0, max = 1, moderate = 10) For values above 1, larger values actually mean less shift\r\rlibrary(tidyverse)\r## -- Attaching packages ------------------------------------------------------------------- tidyverse 1.3.0 --\r## v tibble 3.0.3 v dplyr 1.0.2\r## v tidyr 1.1.2 v stringr 1.4.0\r## v readr 1.3.1 v forcats 0.5.0\r## v purrr 0.3.4\r## -- Conflicts ---------------------------------------------------------------------- tidyverse_conflicts() --\r## x dplyr::filter() masks stats::filter()\r## x dplyr::lag() masks stats::lag()\rlibrary(viridis)\rmake_grid_art \u0026lt;- function(xSize, ySize, grout, hFactor) {\rxWave \u0026lt;- seq.int(1:xSize)\ryWave \u0026lt;- seq.int(1:ySize)\raxMin \u0026lt;- min(min(xWave) - 1,min(yWave) - 1)\raxMax \u0026lt;- max(max(xWave) + 1,max(yWave) + 1)\rnSquares \u0026lt;- length(xWave) * length(yWave)\rdf \u0026lt;- data.frame()\rx \u0026lt;- 0\rhalfGrout \u0026lt;- (1 - grout) / 2\rid_fact = max(xSize,ySize)\rfor (i in seq_along(yWave)) {\ryCentre \u0026lt;- yWave[i]\rfor (j in seq_along(xWave)) {\rif(hFactor \u0026lt; 1) {\rhyst \u0026lt;- rnorm(8, halfGrout, 0)\r}\relse {\r#shift for each line segment drawn standard distribution\rhyst \u0026lt;- rnorm(8, halfGrout, sin(x / (nSquares - 1) * pi) / hFactor)\r}\rxCentre \u0026lt;- xWave[j]\rid \u0026lt;- ((i-1)*id_fact) + j #id groups the segments for each rectangle\redge_dist \u0026lt;- min(abs(i-1), abs(i-ySize),abs(j-1), abs(j-xSize))\r#using the mean of the tilt for edges as the color value\rfill \u0026lt;- mean(hyst) #fill color is the mean of hysteresis shift for segments\rlt \u0026lt;- c(xCentre - hyst[1],yCentre - hyst[2], id, fill, edge_dist)\rrt \u0026lt;- c(xCentre + hyst[3],yCentre - hyst[4], id, fill, edge_dist)\rrb \u0026lt;- c(xCentre + hyst[5],yCentre + hyst[6], id, fill, edge_dist)\rlb \u0026lt;- c(xCentre - hyst[7],yCentre + hyst[8], id, fill, edge_dist)\rdf \u0026lt;- rbind(df, lt,rt,rb,lb)\rx \u0026lt;- x + 1\r}\r}\rnames(df) \u0026lt;- c(\u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;id\u0026quot;, \u0026quot;fill\u0026quot;, \u0026quot;dist\u0026quot;) p \u0026lt;- ggplot(df, aes(x=x, y=y, color=dist, fill=fill, group=id)) +\rgeom_polygon(alpha=0.75) +\rscale_color_viridis(begin=0.35) +\rscale_fill_viridis() +\rtheme_void() +\rguides(color=FALSE, fill=FALSE)\rprint(p)\r}\rThen to create some variations on the parameters\n# square grid with minimal hysteresis\rmake_grid_art(10,10,0.2,50)\r# square grid (more squares) more hysteresis\rmake_grid_art(20,20,0.02,10)\r# rectangular grid same hysteresis\rmake_grid_art(25,15,0,10)\r# same grid with no hysteresis\rmake_grid_art(25,15,0.08,0)\r# square grid moderate hysteresis and no grout\rmake_grid_art(20,20,0,10)\r","date":1593223994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593223994,"objectID":"6ae34abb527ef126ff8d346e2125a46e","permalink":"/post/2020-06-26-hysterical-squares/","publishdate":"2020-06-26T21:13:14-05:00","relpermalink":"/post/2020-06-26-hysterical-squares/","section":"post","summary":"Rotation of rectangles in a grid using a general pattern for simulated hysteresis. This almost entirely derivative effort is a tweak code provided by @quantixed in their post Turn A Square: generative aRt.","tags":["Generative","R Programming"],"title":"Hysterical Squares","type":"post"},{"authors":null,"categories":null,"content":"","date":1532131200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532131200,"objectID":"1bb17efd79d5817f5a89bc3e702c23f7","permalink":"/project/baby-names/","publishdate":"2018-07-21T00:00:00Z","relpermalink":"/project/baby-names/","section":"project","summary":"Data visualization of US baby name popularity [links to external page]","tags":["DataVisualization"],"title":"baby names","type":"project"},{"authors":null,"categories":null,"content":"","date":1525824000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525824000,"objectID":"b3d156e8cfe72018524317ae2b042584","permalink":"/project/mandala-app/","publishdate":"2018-05-09T00:00:00Z","relpermalink":"/project/mandala-app/","section":"project","summary":"Shiny app creates animated mandala patterns based on voronoi regions - configured by radius, palette, points [links to external app]","tags":["Generative","Images"],"title":"animated mandala app","type":"project"},{"authors":null,"categories":null,"content":"","date":1512518400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512518400,"objectID":"10eb5bbf65884567cedc8e9c6d6b55af","permalink":"/project/travel-map-app/","publishdate":"2017-12-06T00:00:00Z","relpermalink":"/project/travel-map-app/","section":"project","summary":"Shiny app using Google maps to show travel locations. Display filters by years or category (home, project, meeting, travel) [links to external app]","tags":["DataVisualization","Travel","Images"],"title":"my travel map app","type":"project"},{"authors":null,"categories":null,"content":"","date":1496707200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496707200,"objectID":"2456705293cab88b03e69aedfcca3d8c","permalink":"/project/image-palette-app/","publishdate":"2017-06-06T00:00:00Z","relpermalink":"/project/image-palette-app/","section":"project","summary":"Shiny app uses k-means clustering to display a color palette from an uploaded image [links to external app]","tags":["DataVisualization","Images"],"title":"color palette app","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6128c77574128dcaa7f0c5923962dafa","permalink":"/project/animated-gif-map/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/animated-gif-map/","section":"project","summary":"Coding travel locations into an animated gif of maps by year [links to external page]","tags":["DataVisualization","Travel","Images","R Programming"],"title":"animated gif map","type":"project"}]